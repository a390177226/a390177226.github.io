<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ZZB's blog</title><link>https://a390177226.github.io/</link><description>Recent content on ZZB's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>zzb2021.</copyright><lastBuildDate>Tue, 11 May 2021 10:11:33 +0800</lastBuildDate><atom:link href="https://a390177226.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>JS基础</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/js%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 11 May 2021 10:11:33 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/js%E5%9F%BA%E7%A1%80/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/js%E5%9F%BA%E7%A1%80/ -&lt;h1 id="js的组成">JS的组成&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">组成&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">ECMAScript&lt;/td>
&lt;td style="text-align:left">JavaScript的语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DOM&lt;/td>
&lt;td style="text-align:left">页面文档对象类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BOM&lt;/td>
&lt;td style="text-align:left">浏览器对象模型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="js使用">JS使用&lt;/h1>
&lt;p>在 HTML 中，JavaScript 代码必须位于 &lt;code>&amp;lt;script&amp;gt;&lt;/code> 与 &lt;code>&amp;lt;/script&amp;gt;&lt;/code> 标签之间。&lt;/p>
&lt;h2 id="内部脚本">内部脚本&lt;/h2>
&lt;p>脚本可被放置与 HTML 页面的 &lt;code>&amp;lt;body&amp;gt;&lt;/code> 或 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 部分中，或兼而有之。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&amp;lt;script&amp;gt;
&lt;span style="color:#658b00">document&lt;/span>.getElementById(&lt;span style="color:#cd5555">&amp;#34;demo&amp;#34;&lt;/span>).innerHTML = &lt;span style="color:#cd5555">&amp;#34;我的第一段 JavaScript&amp;#34;&lt;/span>;
&amp;lt;&lt;span style="color:#a61717;background-color:#e3d2d2">/script&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>提示:&lt;/strong> 把脚本置于 &lt;code>&amp;lt;body&amp;gt;&lt;/code>元素的底部，可改善显示速度，因为脚本编译会拖慢显示。&lt;/p>
&lt;h2 id="外部脚本">外部脚本&lt;/h2>
&lt;p>脚本可放置与外部文件中：&lt;/p>
&lt;p>&lt;strong>外部文件：myScript.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> myFunction() {
&lt;span style="color:#658b00">document&lt;/span>.getElementById(&lt;span style="color:#cd5555">&amp;#34;demo&amp;#34;&lt;/span>).innerHTML = &lt;span style="color:#cd5555">&amp;#34;段落被更改。&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&amp;lt;script src=&lt;span style="color:#cd5555">&amp;#34;myScript.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#a61717;background-color:#e3d2d2">/script&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注释:&lt;/strong> 外部脚本不能包含&lt;code>&amp;lt;script&amp;gt;&lt;/code>标签。&lt;/p>
&lt;p>在外部文件中放置脚本有如下优势：&lt;/p>
&lt;ul>
&lt;li>分离了 HTML 和代码&lt;/li>
&lt;li>使 HTML 和 JavaScript 更易于阅读和维护&lt;/li>
&lt;li>已缓存的 JavaScript 文件可加速页面加载&lt;/li>
&lt;/ul>
&lt;h1 id="输入输出语句">输入输出语句&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">方法&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;th>归属&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">window.alert()&lt;/td>
&lt;td style="text-align:left">浏览器弹出警示框&lt;/td>
&lt;td>浏览器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">console.log()&lt;/td>
&lt;td style="text-align:left">浏览器控制台打印输出信息&lt;/td>
&lt;td>浏览器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">prompt()&lt;/td>
&lt;td style="text-align:left">浏览器弹出输入框，用户可以输入&lt;/td>
&lt;td>浏览器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="js变量">JS变量&lt;/h1>
&lt;h2 id="声明">声明&lt;/h2>
&lt;p>可以通过 var 关键词来声明 JavaScript 变量：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> carName = &lt;span style="color:#cd5555">&amp;#34;porsche&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">类型&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;th>值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Number&lt;/td>
&lt;td style="text-align:left">数值&lt;/td>
&lt;td>写数值时用不用小数点均可&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Boolean&lt;/td>
&lt;td style="text-align:left">布尔值&lt;/td>
&lt;td>布尔值只有两个值：true 或 false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">String&lt;/td>
&lt;td style="text-align:left">字符串&lt;/td>
&lt;td>字符串被引号包围。可使用单引号或双引号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Undefined&lt;/td>
&lt;td style="text-align:left">没有值的变量&lt;/td>
&lt;td>&lt;code>var person;&lt;/code>或者&lt;code>person = undefined;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Null&lt;/td>
&lt;td style="text-align:left">nothing&lt;/td>
&lt;td>可以通过设置值为 null 清空对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Object&lt;/td>
&lt;td style="text-align:left">对象用花括号来书写&lt;/td>
&lt;td>对象属性是 &lt;em>name&lt;/em>:&lt;em>value&lt;/em> 对，由逗号分隔&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note: typeof可以查看数据类型，例如&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">typeof&lt;/span> &lt;span style="color:#cd5555">&amp;#34;Bill&amp;#34;&lt;/span> &lt;span style="color:#228b22">// 返回 &amp;#34;string&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据类型转换">数据类型转换&lt;/h2>
&lt;h3 id="转换为字符串">转换为字符串&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">方法&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;th>例子&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">toString()&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td>&lt;code>var num=1; alert(num.toString());&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">String()&lt;/td>
&lt;td style="text-align:left">强制转换&lt;/td>
&lt;td>&lt;code>var num=1; alert(String(num));&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">加号拼接字符串&lt;/td>
&lt;td style="text-align:left">用的最多&lt;/td>
&lt;td>&lt;code>var num=1; alert(num+&amp;quot;&amp;quot;);&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="转换为数值">转换为数值&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">方法&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;th>例子&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">parseInt(string)&lt;/td>
&lt;td style="text-align:left">将string类型转换为整数数值类型，重点&lt;/td>
&lt;td>parseInt(&amp;lsquo;78&amp;rsquo;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">parseFloat(string)&lt;/td>
&lt;td style="text-align:left">将string类型转换为浮点数数值类型，重点&lt;/td>
&lt;td>parseInt(&amp;lsquo;78.21&amp;rsquo;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Number()&lt;/td>
&lt;td style="text-align:left">将string类型强制转换&lt;/td>
&lt;td>Number(12)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">- * /&lt;/td>
&lt;td style="text-align:left">算数运算隐式转换&lt;/td>
&lt;td>&amp;lsquo;12&amp;rsquo; - 0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="转换为布尔型">转换为布尔型&lt;/h3>
&lt;p>Boolean()函数把其他类型转成布尔值，代表空、否定的值会被转换成false，如''、0、NaN、null、undefined，其余值都会被转换为true。&lt;/p>
&lt;h1 id="条件语句">条件语句&lt;/h1>
&lt;p>&lt;strong>条件语句用于基于不同条件执行不同的动作。&lt;/strong>&lt;/p>
&lt;p>在 JavaScript 中，我们可使用如下条件语句：&lt;/p>
&lt;ul>
&lt;li>使用 if 来规定要执行的代码块，如果指定条件为 true&lt;/li>
&lt;li>使用 else 来规定要执行的代码块，如果相同的条件为 false&lt;/li>
&lt;li>使用 else if 来规定要测试的新条件，如果第一个条件为 false&lt;/li>
&lt;li>使用 switch 来规定多个被执行的备选代码块&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (time &amp;lt; &lt;span style="color:#b452cd">10&lt;/span>) {
greeting = &lt;span style="color:#cd5555">&amp;#34;Good morning&amp;#34;&lt;/span>;
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (time &amp;lt; &lt;span style="color:#b452cd">18&lt;/span>) {
greeting = &lt;span style="color:#cd5555">&amp;#34;Good day&amp;#34;&lt;/span>;
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
greeting = &lt;span style="color:#cd5555">&amp;#34;Good evening&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="循环语句">循环语句&lt;/h1>
&lt;p>&lt;strong>循环可多次执行代码块。&lt;/strong>&lt;/p>
&lt;p>JavaScript 支持不同类型的循环：&lt;/p>
&lt;ul>
&lt;li>for - 多次遍历代码块&lt;/li>
&lt;li>for/in - 遍历对象属性&lt;/li>
&lt;li>while - 当指定条件为 true 时循环一段代码块&lt;/li>
&lt;li>do/while - 当指定条件为 true 时循环一段代码块&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>for (i = 0; i &amp;lt; 5; i++) {
text += &amp;quot;数字是 &amp;quot; + i + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
}
&lt;/code>&lt;/pre>&lt;h1 id="js数组">JS数组&lt;/h1>
&lt;h2 id="定义和创建">定义和创建&lt;/h2>
&lt;p>JavaScript 数组用于在单一变量中存储多个值。&lt;/p>
&lt;p>创建数组的两种方式：&lt;/p>
&lt;ul>
&lt;li>使用关键词 new，例如&lt;code>var cars = new Array(&amp;quot;Saab&amp;quot;, &amp;quot;Volvo&amp;quot;, &amp;quot;BMW&amp;quot;);&lt;/code>&lt;/li>
&lt;li>使用数组字面量，常用，例如&lt;code>var cars = [&amp;quot;Saab&amp;quot;, &amp;quot;Volvo&amp;quot;, &amp;quot;BMW&amp;quot;];&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="访问数组元素">访问数组元素&lt;/h2>
&lt;p>我们通过引用索引号（下标号）来引用某个数组元素。&lt;/p>
&lt;p>这条语句访问 cars 中的首个元素的值：&lt;code>var name = cars[0];&lt;/code>&lt;/p>
&lt;p>这条语句修改 cars 中的首个元素：&lt;code>cars[0] = &amp;quot;Opel&amp;quot;;&lt;/code>&lt;/p>
&lt;h2 id="数组长度">数组长度&lt;/h2>
&lt;p>length 属性返回数组的长度（数组元素的数目）。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
fruits.length; &lt;span style="color:#228b22">// fruits 的长度是 4
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="遍历数组">遍历数组&lt;/h2>
&lt;p>遍历数组的最安全方法是使用 &amp;ldquo;for&amp;rdquo; 循环：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (i = &lt;span style="color:#b452cd">0&lt;/span>; i &amp;lt; cars.length; i++) {
console.log(cars[i]);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数组方法">数组方法&lt;/h2>
&lt;p>JavaScript 数组的力量隐藏在数组方法中。&lt;a href="https://www.w3school.com.cn/js/js_array_methods.asp">JavaScript 数组方法 (w3school.com.cn)&lt;/a>&lt;/p>
&lt;h1 id="函数">函数&lt;/h1>
&lt;p>&lt;strong>JavaScript 函数是被设计为执行特定任务的代码块。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>JavaScript 函数会在某代码调用它时被执行。&lt;/strong>&lt;/p>
&lt;h2 id="为何使用函数">为何使用函数？&lt;/h2>
&lt;p>您能够对代码进行复用：只要定义一次代码，就可以多次使用它。&lt;/p>
&lt;p>您能够多次向同一函数传递不同的参数，以产生不同的结果。&lt;/p>
&lt;h2 id="声明和调用">声明和调用&lt;/h2>
&lt;p>当 JavaScript 到达 return 语句，函数将停止执行。&lt;/p>
&lt;p>如果函数被某条语句调用，JavaScript 将在调用语句之后“返回”执行代码。&lt;/p>
&lt;p>函数通常会计算出返回值。这个返回值会返回给调用者。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = myFunction(&lt;span style="color:#b452cd">7&lt;/span>, &lt;span style="color:#b452cd">8&lt;/span>); &lt;span style="color:#228b22">// 调用函数，返回值被赋值给 x
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> myFunction(a, b) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> a * b; &lt;span style="color:#228b22">// 函数返回 a 和 b 的乘积
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note：&lt;/p>
&lt;ul>
&lt;li>JavaScript 函数不会对参数值进行任何检查。如果调用参数时省略了参数（少于被声明的数量），则丢失的值被设置为：undefined。&lt;/li>
&lt;li>如果函数调用的参数太多（超过声明），则可以使用 arguments 对象来达到这些参数。&lt;/li>
&lt;/ul>
&lt;h2 id="函数表达式">函数表达式&lt;/h2>
&lt;p>JavaScript 函数也可以使用表达式来定义。&lt;/p>
&lt;p>函数表达式可以在变量中存储：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> (a, b) {&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> a * b};
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> z = x(&lt;span style="color:#b452cd">4&lt;/span>, &lt;span style="color:#b452cd">3&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的函数实际上是一个匿名函数（没有名称的函数）。&lt;/p>
&lt;h1 id="作用域">作用域&lt;/h1>
&lt;p>作用域是指变量在某个范围内起作用，目的是提高程序的可靠性和减少命名冲突。&lt;/p>
&lt;h2 id="es6之前的作用域">ES6之前的作用域&lt;/h2>
&lt;p>在 JavaScript 中有两种作用域类型：&lt;/p>
&lt;ul>
&lt;li>局部作用域&lt;/li>
&lt;li>全局作用域&lt;/li>
&lt;/ul>
&lt;p>JavaScript 拥有函数作用域：每个函数创建一个新的作用域。&lt;/p>
&lt;p>作用域决定了这些变量的可访问性（可见性）。&lt;/p>
&lt;p>函数内部定义的变量从函数外部是不可访问的（不可见的）。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">变量类型&lt;/th>
&lt;th style="text-align:left">声明&lt;/th>
&lt;th>作用域&lt;/th>
&lt;th>有效期&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">局部变量&lt;/td>
&lt;td style="text-align:left">函数中声明的变量&lt;/td>
&lt;td>只能在函数内部访问它们&lt;/td>
&lt;td>在函数完成时被删除&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">全局变量&lt;/td>
&lt;td style="text-align:left">函数之外声明的变量&lt;/td>
&lt;td>网页的所有脚本和函数都能够访问它&lt;/td>
&lt;td>在关闭页面是被删除&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note: 如果您为尚未声明的变量赋值，此变量会自动成为全局变量。所有现代浏览器都支持以“严格模式”运行 JavaScript。在“严格模式”中不会自动创建全局变量。除非有意为之，否则请勿创建全局变量。&lt;/p>
&lt;h1 id="预解析提升">预解析/提升&lt;/h1>
&lt;p>预解析也叫做提升（Hoisting）。预解析分为变量提升和函数提升。&lt;/p>
&lt;p>变量提升就是把所有变量声明提升到当前的作用域最前面，不提升赋值操作。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">console.log(num); &lt;span style="color:#228b22">// 输出undefined
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> num = &lt;span style="color:#b452cd">10&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>函数提升就是把所有的函数声明提升到当前的作用域最前面，不调用函数。&lt;/p>
&lt;p>使用表达式定义的函数不会被提升。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">console.log(myFunction(&lt;span style="color:#b452cd">5&lt;/span>)); &lt;span style="color:#228b22">// 输出25
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> myFunction(y) {&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> y * y;}
fun(); &lt;span style="color:#228b22">// 报错
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fun = &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {console.log(&lt;span style="color:#b452cd">22&lt;/span>);}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="js对象">JS对象&lt;/h1>
&lt;h2 id="定义">定义&lt;/h2>
&lt;p>对象是复杂数据类型，是一组无序的相关属性和方法的集合，几乎“所有事物”都是对象。&lt;/p>
&lt;p>对象也是变量，能够包含很多值，以值按照名称 : 值对的形式编写。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = {
name: &lt;span style="color:#cd5555">&amp;#34;zzb&amp;#34;&lt;/span>,
getName : &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.firstName;}
};
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">组成&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;th>值&lt;/th>
&lt;th>访问&lt;/th>
&lt;th>注释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">属性&lt;/td>
&lt;td style="text-align:left">对象中的命名值&lt;/td>
&lt;td>原始值、其他对象以及函数&lt;/td>
&lt;td>&lt;code>person.name&lt;/code> 或者&lt;code>person['name']&lt;/code>&lt;/td>
&lt;td>可以被修改、添加和删除，但是某些属性是只读的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">方法&lt;/td>
&lt;td style="text-align:left">在对象上执行的动作&lt;/td>
&lt;td>以&lt;strong>函数定义&lt;/strong>被存储在属性中&lt;/td>
&lt;td>&lt;code>person.getName()&lt;/code>&lt;/td>
&lt;td>&lt;code>person.getName&lt;/code>将返回函数定义&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="创建对象">创建对象&lt;/h2>
&lt;p>有不同的方法来创建对象。在 ES5 中，也可以通过函数 Object.create() 来创建对象。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">方法&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;th>注释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">使用对象字面量&lt;/td>
&lt;td style="text-align:left">定义和创建单个对象&lt;/td>
&lt;td>最简单、最常用，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">使用关键词&lt;code>new&lt;/code>&lt;/td>
&lt;td style="text-align:left">定义和创建单个对象&lt;/td>
&lt;td>不推荐使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">使用构造函数&lt;/td>
&lt;td style="text-align:left">定义对象构造器&lt;/td>
&lt;td>用大写首字母命名，调用必须使用&lt;code>new&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#228b22">// 使用对象字面量
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = {firstName:&lt;span style="color:#cd5555">&amp;#34;Bill&amp;#34;&lt;/span>, lastName:&lt;span style="color:#cd5555">&amp;#34;Gates&amp;#34;&lt;/span>};
&lt;span style="color:#228b22">// 使用关键词 new
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#658b00">Object&lt;/span>();
person.firstName = &lt;span style="color:#cd5555">&amp;#34;Bill&amp;#34;&lt;/span>;
person.lastName = &lt;span style="color:#cd5555">&amp;#34;Gates&amp;#34;&lt;/span>;
&lt;span style="color:#228b22">// 使用构造函数，不需要return就可以返回结果
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> Star(uname, age){
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.uname = uname;
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.age = age;
}
&lt;span style="color:#228b22">// 实例化
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> ldh = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Star(&lt;span style="color:#cd5555">&amp;#39;刘德华&amp;#39;&lt;/span>, &lt;span style="color:#b452cd">18&lt;/span>);
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> zxy = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Star(&lt;span style="color:#cd5555">&amp;#39;张学友&amp;#39;&lt;/span>, &lt;span style="color:#b452cd">19&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note： 对象是易变的：它们通过引用来寻址，而非值。&lt;/p>
&lt;p>如果 person 是一个对象，下面的语句不会创建 person 的副本：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = {firstName:&lt;span style="color:#cd5555">&amp;#34;Bill&amp;#34;&lt;/span>, lastName:&lt;span style="color:#cd5555">&amp;#34;Gates&amp;#34;&lt;/span>, age:&lt;span style="color:#b452cd">62&lt;/span>}
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = person; &lt;span style="color:#228b22">// 这不会创建 person 的副本。
&lt;/span>&lt;span style="color:#228b22">&lt;/span>x.age = &lt;span style="color:#b452cd">10&lt;/span>; &lt;span style="color:#228b22">// 这将同时改变 both x.age 和 person.age
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对象 x &lt;strong>并非&lt;/strong>person 的副本。它&lt;strong>就是&lt;/strong>person。x 和 person 是同一个对象。&lt;/p>
&lt;p>对 x 的任何改变都将改变 person，因为 x 和 person 是相同的对象。&lt;/p>
&lt;h2 id="遍历对象">遍历对象&lt;/h2>
&lt;p>使用 &lt;code>for...in&lt;/code> 语句遍历对象的属性。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = {fname:&lt;span style="color:#cd5555">&amp;#34;Bill&amp;#34;&lt;/span>, lname:&lt;span style="color:#cd5555">&amp;#34;Gates&amp;#34;&lt;/span>, age:&lt;span style="color:#b452cd">62&lt;/span>};
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (x &lt;span style="color:#8b008b;font-weight:bold">in&lt;/span> person) {
console.log(x); &lt;span style="color:#228b22">// x是属性名
&lt;/span>&lt;span style="color:#228b22">&lt;/span> console.log(person[x]); &lt;span style="color:#228b22">// person[x]是属性值
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="添加和删除属性">添加和删除属性&lt;/h2>
&lt;p>通过简单的赋值，向已存在的对象添加新属性。&lt;/p>
&lt;p>&lt;code>delete&lt;/code> 关键词从对象中删除属性。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = {firstName:&lt;span style="color:#cd5555">&amp;#34;Bill&amp;#34;&lt;/span>, lastName:&lt;span style="color:#cd5555">&amp;#34;Gates&amp;#34;&lt;/span>, age:&lt;span style="color:#b452cd">62&lt;/span>, eyeColor:&lt;span style="color:#cd5555">&amp;#34;blue&amp;#34;&lt;/span>};
&lt;span style="color:#228b22">// 添加属性
&lt;/span>&lt;span style="color:#228b22">&lt;/span>person.nationality = &lt;span style="color:#cd5555">&amp;#34;English&amp;#34;&lt;/span>;
&lt;span style="color:#228b22">// 删除属性
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">delete&lt;/span> person.age;
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="this关键字">this关键字&lt;/h1>
&lt;p>&lt;code>this&lt;/code> 关键词指的是它所属的对象。&lt;/p>
&lt;p>它拥有不同的值，具体取决于它的使用位置：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">使用位置&lt;/th>
&lt;th style="text-align:left">值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">在方法中&lt;/td>
&lt;td style="text-align:left">&lt;code>this&lt;/code> 指的是所有者对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">单独的情况下&lt;/td>
&lt;td style="text-align:left">&lt;code>this&lt;/code> 指的是全局对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">在函数中&lt;/td>
&lt;td style="text-align:left">&lt;code>this&lt;/code> 指的是全局对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">在函数中，严格模式下&lt;/td>
&lt;td style="text-align:left">&lt;code>this&lt;/code> 是 undefined&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">在事件中&lt;/td>
&lt;td style="text-align:left">&lt;code>this&lt;/code> 指的是接收事件的元素&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>像&lt;code>call()&lt;/code> 和 &lt;code>apply()&lt;/code> 这样的方法可以将 this 引用到任何对象。&lt;/p>
&lt;h2 id="方法中的-this">方法中的 this&lt;/h2>
&lt;p>在对象方法中，this 指的是此方法的“拥有者”。&lt;/p>
&lt;p>在下面例子中，this 指的是 person 对象，person 对象是 getName方法的拥有者。&lt;/p>
&lt;p>&lt;code>this.firstName&lt;/code> 意味着 &lt;code>this&lt;/code>（person）对象的 &lt;code>firstName&lt;/code> 属性。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> person = {
name: &lt;span style="color:#cd5555">&amp;#34;zzb&amp;#34;&lt;/span>,
getName : &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.firstName;}
};
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="单独的-this">单独的 this&lt;/h2>
&lt;p>在单独使用时，拥有者是全局对象，因此 &lt;code>this&lt;/code> 指的是全局对象。&lt;/p>
&lt;p>在浏览器窗口中，全局对象是 &lt;code>[object Window]&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在严格模式中, 同样。&lt;/p>
&lt;h2 id="函数中的-this默认">函数中的 this（默认）&lt;/h2>
&lt;p>在 JS函数中，函数的拥有者默认绑定 &lt;code>this&lt;/code>。&lt;/p>
&lt;p>因此，在函数中，&lt;code>this&lt;/code> 指的是全局对象 &lt;code>[object Window]&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> myFunction() {&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>;}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数中的-this严格模式">函数中的 this（严格模式）&lt;/h2>
&lt;p>严格模式不允许默认绑定。&lt;/p>
&lt;p>因此，在函数中使用时，在严格模式下，this 是未定义的（undefined）。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#cd5555">&amp;#34;use strict&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> myFunction() {&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>;}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="事件处理程序中的-this">事件处理程序中的 this&lt;/h2>
&lt;p>在 HTML 事件处理程序中，this 指的是接收此事件的 HTML 元素：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">button&lt;/span> &lt;span style="color:#658b00">onclick&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;this.style.display=&amp;#39;none&amp;#39;&amp;#34;&lt;/span>&amp;gt;单击来删除我！&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="显式函数绑定">显式函数绑定&lt;/h2>
&lt;p>&lt;code>call()&lt;/code> 和 &lt;code>apply()&lt;/code> 方法是预定义的 JavaScript 方法。&lt;/p>
&lt;p>它们都可以用于将另一个对象作为参数调用对象方法。&lt;/p>
&lt;h1 id="内置对象">内置对象&lt;/h1>
&lt;p>JS的对象分为三种：自定义对象、内置对象、浏览器对象。&lt;/p>
&lt;p>前两种是JS基础内容，属于ECMAScipt；浏览器对象属于JS独有的，在JS API中讲解。&lt;/p>
&lt;p>&lt;strong>内置对象&lt;/strong>是指JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）。&lt;/p>
&lt;p>内置对象最大的优点就是帮助我们快速开发。&lt;/p>
&lt;p>JS提供了多个内置对象：Math、Date、Array、String等。&lt;/p>
&lt;h2 id="math数学对象">Math数学对象&lt;/h2>
&lt;p>&lt;code>Math&lt;/code>对象拥有一些数学常数属性和数学函数方法。&lt;code>Math&lt;/code> 不是一个函数对象，即不需要new来调用。&lt;/p>
&lt;p>&lt;code>Math&lt;/code> 用于 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">&lt;code>Number&lt;/code>&lt;/a> 类型。它不支持 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">&lt;code>BigInt&lt;/code>&lt;/a>。&lt;/p>
&lt;p>&lt;code>Math&lt;/code> 的所有属性与方法都是静态的。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#658b00">Math&lt;/span>.PI; &lt;span style="color:#228b22">// 圆周率
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#658b00">Math&lt;/span>.floor(&lt;span style="color:#b452cd">1.9&lt;/span>); &lt;span style="color:#228b22">// 向下取整,返回1
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#658b00">Math&lt;/span>.ceil(&lt;span style="color:#b452cd">1.9&lt;/span>); &lt;span style="color:#228b22">// 向上取整,返回2
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#658b00">Math&lt;/span>.round(-&lt;span style="color:#b452cd">1.5&lt;/span>); &lt;span style="color:#228b22">// 四舍五入，但是.5特殊它往大了取值，返回-1
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#658b00">Math&lt;/span>.abs(-&lt;span style="color:#b452cd">1&lt;/span>); &lt;span style="color:#228b22">// 绝对值，返回1
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#658b00">Math&lt;/span>.max(&lt;span style="color:#b452cd">1&lt;/span>,&lt;span style="color:#b452cd">2&lt;/span>); &lt;span style="color:#228b22">// 求最大值，返回2
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#658b00">Math&lt;/span>.min(&lt;span style="color:#b452cd">1&lt;/span>,&lt;span style="color:#b452cd">2&lt;/span>); &lt;span style="color:#228b22">// 求最小值，返回1
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Math.random()&lt;/code>函数返回一个浮点数, 伪随机数的范围是 [0，1）。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#228b22">// 得到一个两数之间的随机整数，包括两个数在内
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> getRandom(min, max) {
min = &lt;span style="color:#658b00">Math&lt;/span>.ceil(min);
max = &lt;span style="color:#658b00">Math&lt;/span>.floor(max);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#658b00">Math&lt;/span>.floor(&lt;span style="color:#658b00">Math&lt;/span>.random() * (max - min + &lt;span style="color:#b452cd">1&lt;/span>)) + min; &lt;span style="color:#228b22">//含最大值，含最小值
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="date日期对象">Date日期对象&lt;/h2>
&lt;p>&lt;code>Date&lt;/code> 对象则基于 &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16">Unix Time Stamp&lt;/a>，即自1970年1月1日（UTC）起经过的毫秒数。&lt;/p>
&lt;p>创建一个新&lt;code>Date&lt;/code>对象的唯一方法是通过&lt;code>new&lt;/code>操作符，例如:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> date = &lt;span style="color:#658b00">Date&lt;/span>(); &lt;span style="color:#228b22">// 没有参数，返回系统的当前时间
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> date1 = &lt;span style="color:#658b00">Date&lt;/span>(&lt;span style="color:#cd5555">&amp;#39;2021-5-18&amp;#39;&lt;/span>); &lt;span style="color:#228b22">// 常用，参数是日期的字符串值
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>日期格式化&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">方法&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">getFullYear()&lt;/td>
&lt;td style="text-align:left">获取四位的年（yyyy）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getMonth()&lt;/td>
&lt;td style="text-align:left">获取月（0-11）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getDate()&lt;/td>
&lt;td style="text-align:left">以数值返回天（1-31）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getDay()&lt;/td>
&lt;td style="text-align:left">以数值获取周名（0-6），周日是0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getHours()&lt;/td>
&lt;td style="text-align:left">获取小时（0-23）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getMinutes()&lt;/td>
&lt;td style="text-align:left">获取分（0-59）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getSeconds()&lt;/td>
&lt;td style="text-align:left">获取秒（0-59）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">getTime()&lt;/td>
&lt;td style="text-align:left">获取时间（从 1970 年 1 月 1 日至今）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>案例：倒计时&lt;/strong>&lt;/p>
&lt;p>用时间戳来做，输入时间的总毫秒数减去现在时间的总毫秒数，得到剩余时间的总毫秒数。把剩余时间的总毫秒数转换成天、时、分、秒。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> countDown(time) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> nowTime = +&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#658b00">Date&lt;/span>(); &lt;span style="color:#228b22">// 返回当前时间的总毫秒数
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> inputTime = +&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#658b00">Date&lt;/span>(time); &lt;span style="color:#228b22">// 返回用户输入时间的总毫秒数
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> times = (inputTime - nowTime) / &lt;span style="color:#b452cd">1000&lt;/span>; &lt;span style="color:#228b22">// 返回剩余时间的总秒数
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> d = &lt;span style="color:#658b00">parseInt&lt;/span>(times/&lt;span style="color:#b452cd">60&lt;/span>/&lt;span style="color:#b452cd">60&lt;/span>/&lt;span style="color:#b452cd">24&lt;/span>); &lt;span style="color:#228b22">// 返回天
&lt;/span>&lt;span style="color:#228b22">&lt;/span> d = d &amp;lt; &lt;span style="color:#b452cd">10&lt;/span> ? &lt;span style="color:#cd5555">&amp;#39;0&amp;#39;&lt;/span> + d : d;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> h = &lt;span style="color:#658b00">parseInt&lt;/span>(times/&lt;span style="color:#b452cd">60&lt;/span>/&lt;span style="color:#b452cd">60&lt;/span>%&lt;span style="color:#b452cd">24&lt;/span>); &lt;span style="color:#228b22">// 返回时
&lt;/span>&lt;span style="color:#228b22">&lt;/span> h = h &amp;lt; &lt;span style="color:#b452cd">10&lt;/span> ? &lt;span style="color:#cd5555">&amp;#39;0&amp;#39;&lt;/span> + h : h;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> m = &lt;span style="color:#658b00">parseInt&lt;/span>(times/&lt;span style="color:#b452cd">60&lt;/span>%&lt;span style="color:#b452cd">60&lt;/span>); &lt;span style="color:#228b22">// 返回分
&lt;/span>&lt;span style="color:#228b22">&lt;/span> m = m &amp;lt; &lt;span style="color:#b452cd">10&lt;/span> ? &lt;span style="color:#cd5555">&amp;#39;0&amp;#39;&lt;/span> + m : m;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> s = &lt;span style="color:#658b00">parseInt&lt;/span>(times%&lt;span style="color:#b452cd">60&lt;/span>); &lt;span style="color:#228b22">// 返回秒数
&lt;/span>&lt;span style="color:#228b22">&lt;/span> s = s &amp;lt; &lt;span style="color:#b452cd">10&lt;/span> ? &lt;span style="color:#cd5555">&amp;#39;0&amp;#39;&lt;/span> + s : s;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> d+&lt;span style="color:#cd5555">&amp;#39;天&amp;#39;&lt;/span>+h+&lt;span style="color:#cd5555">&amp;#39;时&amp;#39;&lt;/span>+m+&lt;span style="color:#cd5555">&amp;#39;分&amp;#39;&lt;/span>+s+&lt;span style="color:#cd5555">&amp;#39;秒&amp;#39;&lt;/span>;
}
console.log(countDown(&lt;span style="color:#cd5555">&amp;#39;2021-5-20 18:00:00&amp;#39;&lt;/span>));
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="array数组对象">Array数组对象&lt;/h2>
&lt;h3 id="检测是否为数组">检测是否为数组&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> arr = [];
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> obj = {};
&lt;span style="color:#228b22">// instanceof 运算符
&lt;/span>&lt;span style="color:#228b22">&lt;/span>console.log(arr &lt;span style="color:#8b008b;font-weight:bold">instanceof&lt;/span> &lt;span style="color:#658b00">Array&lt;/span>); &lt;span style="color:#228b22">// 返回true
&lt;/span>&lt;span style="color:#228b22">&lt;/span>console.log(obj &lt;span style="color:#8b008b;font-weight:bold">instanceof&lt;/span> &lt;span style="color:#658b00">Array&lt;/span>); &lt;span style="color:#228b22">// 返回false
&lt;/span>&lt;span style="color:#228b22">// Array.isArray()
&lt;/span>&lt;span style="color:#228b22">&lt;/span>console.log(&lt;span style="color:#658b00">Array&lt;/span>.isArray(arr)); &lt;span style="color:#228b22">// 返回true
&lt;/span>&lt;span style="color:#228b22">&lt;/span>console.log(&lt;span style="color:#658b00">Array&lt;/span>.isArray(obj)); &lt;span style="color:#228b22">// 返回false
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加数组元素">添加数组元素&lt;/h3>
&lt;p>&lt;code>push()&lt;/code> 方法（在数组结尾处）向数组添加一个新的元素，返回新数组的长度:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = fruits.push(&lt;span style="color:#cd5555">&amp;#34;Kiwi&amp;#34;&lt;/span>); &lt;span style="color:#228b22">// x 的值是 5
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>unshift()&lt;/code> 方法（在开头）向数组添加新元素，并“反向位移”旧元素，返回新数组的长度：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = fruits.unshift(&lt;span style="color:#cd5555">&amp;#34;Lemon&amp;#34;&lt;/span>); &lt;span style="color:#228b22">// x 的值是 5
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除数组元素">删除数组元素&lt;/h3>
&lt;p>&lt;code>pop()&lt;/code>方法从数组中删除最后一个元素，返回“被弹出”的值：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = fruits.pop(); &lt;span style="color:#228b22">// x 的值是 &amp;#34;Mango&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>shift()&lt;/code>方法会删除首个数组元素，返回被“位移出”的字符串:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> x = fruits.pop(); &lt;span style="color:#228b22">// x 的值是 &amp;#34;Banana&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数组排序">数组排序&lt;/h3>
&lt;h4 id="反转数组">反转数组&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
fruits.sort(); &lt;span style="color:#228b22">// 对 fruits 中的元素以字母顺序进行排序
&lt;/span>&lt;span style="color:#228b22">&lt;/span>fruits.reverse(); &lt;span style="color:#228b22">// 反转元素顺序
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="数字排序">数字排序&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#228b22">// 升序排序
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> points = [&lt;span style="color:#b452cd">40&lt;/span>, &lt;span style="color:#b452cd">100&lt;/span>, &lt;span style="color:#b452cd">1&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>, &lt;span style="color:#b452cd">25&lt;/span>, &lt;span style="color:#b452cd">10&lt;/span>];
points.sort(&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>(a, b){&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> a - b});
&lt;span style="color:#228b22">// 降序排序
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> points = [&lt;span style="color:#b452cd">40&lt;/span>, &lt;span style="color:#b452cd">100&lt;/span>, &lt;span style="color:#b452cd">1&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>, &lt;span style="color:#b452cd">25&lt;/span>, &lt;span style="color:#b452cd">10&lt;/span>];
points.sort(&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>(a, b){&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> b - a});
&lt;span style="color:#228b22">// 以随机顺序排序
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> points = [&lt;span style="color:#b452cd">40&lt;/span>, &lt;span style="color:#b452cd">100&lt;/span>, &lt;span style="color:#b452cd">1&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>, &lt;span style="color:#b452cd">25&lt;/span>, &lt;span style="color:#b452cd">10&lt;/span>];
points.sort(&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>(a, b){&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#b452cd">0.5&lt;/span> - &lt;span style="color:#658b00">Math&lt;/span>.random()});
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数组索引">数组索引&lt;/h3>
&lt;p>&lt;code>indexOf()&lt;/code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> array = [&lt;span style="color:#b452cd">2&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>, &lt;span style="color:#b452cd">9&lt;/span>];
array.indexOf(&lt;span style="color:#b452cd">2&lt;/span>); &lt;span style="color:#228b22">// 0
&lt;/span>&lt;span style="color:#228b22">&lt;/span>array.indexOf(&lt;span style="color:#b452cd">7&lt;/span>); &lt;span style="color:#228b22">// -1
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>lastIndexOf() &lt;/code>方法返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> array = [&lt;span style="color:#b452cd">2&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>, &lt;span style="color:#b452cd">9&lt;/span>, &lt;span style="color:#b452cd">2&lt;/span>];
array.lastIndexOf(&lt;span style="color:#b452cd">2&lt;/span>); &lt;span style="color:#228b22">// 3
&lt;/span>&lt;span style="color:#228b22">&lt;/span>array.lastIndexOf(&lt;span style="color:#b452cd">7&lt;/span>); &lt;span style="color:#228b22">// -1
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>案例：数组去重&lt;/strong>&lt;/p>
&lt;p>目标：把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个。&lt;/p>
&lt;p>核心算法：遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过就添加，否则不添加。&lt;/p>
&lt;p>我们怎么知道该元素没有存在？利用新数组的&lt;code>indexOf()&lt;/code>方法，如果返回-1就说明新数组里面没有该元素。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> unique(arr) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> newArr = [];
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> i=&lt;span style="color:#b452cd">0&lt;/span>; i &amp;lt; arr.length; i++) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (newArr.indexOf(arr[i]) === -&lt;span style="color:#b452cd">1&lt;/span>)
newArr.push(arr[i]);
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> newArr;
}
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> demo = unique([&lt;span style="color:#cd5555">&amp;#39;b&amp;#39;&lt;/span>,&lt;span style="color:#cd5555">&amp;#39;a&amp;#39;&lt;/span>,&lt;span style="color:#cd5555">&amp;#39;b&amp;#39;&lt;/span>]); &lt;span style="color:#228b22">// demo = [&amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数组转换成字符串">数组转换成字符串&lt;/h3>
&lt;p>&lt;code>toString()&lt;/code>方法 把数组转换为数组值（逗号分隔）的字符串。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
fruits.toString(); &lt;span style="color:#228b22">// 返回字符串&amp;#34;Banana,Orange,Apple,Mango&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>join() &lt;/code>方法也可将所有数组元素结合为一个字符串，可以规定分隔符。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> fruits = [&lt;span style="color:#cd5555">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Orange&amp;#34;&lt;/span>,&lt;span style="color:#cd5555">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;Mango&amp;#34;&lt;/span>];
fruits.join(&lt;span style="color:#cd5555">&amp;#34; * &amp;#34;&lt;/span>); &lt;span style="color:#228b22">// 返回字符串&amp;#34;Banana * Orange * Apple * Mango&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他方法">其他方法&lt;/h3>
&lt;p>&lt;code>concat()&lt;/code>方法通过合并（连接）现有数组来创建一个新数组。&lt;/p>
&lt;p>&lt;code>slice()&lt;/code>方法用数组的某个片段切出新数组，不会从原数组中删除任何元素。&lt;/p>
&lt;p>&lt;code>splice()&lt;/code>方法可用于向数组添加新项或删除元素，会影响原数组，重点。&lt;/p>
&lt;h2 id="string字符串对象">String字符串对象&lt;/h2>
&lt;p>基本包装类型就是把简单数据类型包装成复杂数据类型，这样基本数据类型就有了属性和方法。&lt;/p>
&lt;p>基本包装类型有String、Number和Boolean。&lt;/p>
&lt;p>&lt;strong>字符串的不可变&lt;/strong>&lt;/p>
&lt;p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。&lt;/p>
&lt;h3 id="根据字符返回位置">根据字符返回位置&lt;/h3>
&lt;p>&lt;code>indexOf()&lt;/code>方法返回在字符串中可以找到给定字符的第一个索引，如果不存在，则返回-1。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> str = &lt;span style="color:#cd5555">&amp;#34;改革春风吹满地，春天来了&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> pos1 = str.indexOf(&lt;span style="color:#cd5555">&amp;#34;春&amp;#34;&lt;/span>); &lt;span style="color:#228b22">// pos1 = 2
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> pos2 = str.indexOf(&lt;span style="color:#cd5555">&amp;#34;春&amp;#34;&lt;/span>, &lt;span style="color:#b452cd">3&lt;/span>); &lt;span style="color:#228b22">// 第二个参数是起始的位置，pos2 = 8
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>案例：求某个字符出现的位置和次数&lt;/strong>&lt;/p>
&lt;p>查找字符串&amp;quot;abcoefoxyozzopp&amp;quot;中所有o出现的位置和次数。&lt;/p>
&lt;p>核心算法：先查找第一个字符出现的位置，然后只要indexOf()返回不是-1就继续往后查找。因为indexOf()只能查找到第一个，所以后面的查找，利用第二参数，当前索引加1，从而继续查找。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> demo(str,&lt;span style="color:#8b008b;font-weight:bold">char&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> pos = [];
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> num = &lt;span style="color:#b452cd">0&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> index = str.indexOf(&lt;span style="color:#8b008b;font-weight:bold">char&lt;/span>);
&lt;span style="color:#8b008b;font-weight:bold">while&lt;/span>(index !== -&lt;span style="color:#b452cd">1&lt;/span>) {
pos.push(index);
num++;
index = str.indexOf(&lt;span style="color:#8b008b;font-weight:bold">char&lt;/span>, index+&lt;span style="color:#b452cd">1&lt;/span>);
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> {position:pos,number:num};
}
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> str = &lt;span style="color:#cd5555">&amp;#34;abcoefoxyozzopp&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">char&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;o&amp;#34;&lt;/span>;
demo(str,&lt;span style="color:#8b008b;font-weight:bold">char&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="根据位置返回字符">根据位置返回字符&lt;/h2>
&lt;p>两个提取字符串字符的安全方法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>charAt()&lt;/code> 方法返回字符串中指定下标（位置）的字符串。&lt;/li>
&lt;li>&lt;code>charCodeAt()&lt;/code> 方法返回字符串中指定索引的字符ASCII值，目的是判断用户按下了哪个键。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>属性访问（Property Access）&lt;/strong>&lt;/p>
&lt;p>ECMAScript 5 (2009) 允许对字符串的属性访问 [ ]，不太靠谱，不推荐使用。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> str = &lt;span style="color:#cd5555">&amp;#34;HELLO WORLD&amp;#34;&lt;/span>;
str[&lt;span style="color:#b452cd">0&lt;/span>]; &lt;span style="color:#228b22">// 返回 H
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>案例：统计出现次数最多的字符&lt;/strong>&lt;/p>
&lt;p>判断一个字符串&amp;quot;abcoefoxyozzopp&amp;quot;中出现次数最多的字符，并统计其次数。&lt;/p>
&lt;p>核心算法：利用&lt;code>charAt()&lt;/code> 遍历这个字符串，把每个字符都存储给对象，如果对象没有该属性，就为1，如果存在了就+1。遍历对象，得到最大值和该字符。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> str = &lt;span style="color:#cd5555">&amp;#34;abcoefoxyozzopp&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> obj = {};
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> i = &lt;span style="color:#b452cd">0&lt;/span>; i &amp;lt; str.length; i++) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> chars = str.charAt(i); &lt;span style="color:#228b22">// chars是字符串的每一个字符
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (o[chars]) { &lt;span style="color:#228b22">// o[chars]得到的是属性值
&lt;/span>&lt;span style="color:#228b22">&lt;/span> o[chars]++;
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
o[chars] = &lt;span style="color:#b452cd">1&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/js%E5%9F%BA%E7%A1%80/ - zzb2021.</description></item><item><title>CSS高级</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E9%AB%98%E7%BA%A7/</link><pubDate>Thu, 06 May 2021 12:51:44 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E9%AB%98%E7%BA%A7/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E9%AB%98%E7%BA%A7/ -&lt;h1 id="精灵图">精灵图&lt;/h1>
&lt;p>图像精灵（&lt;a href="https://www.w3schools.com/css/css_image_sprites.asp">Image Sprites&lt;/a>）是单个图像中包含的图像集合。&lt;/p>
&lt;p>包含许多图像的网页可能需要很长时间才能加载，同时会生成多个服务器请求。&lt;/p>
&lt;p>使用图像精灵将减少服务器请求的数量并节约带宽。&lt;/p>
&lt;h1 id="字体图标">字体图标&lt;/h1>
&lt;p>向 HTML 页面添加&lt;a href="https://www.w3school.com.cn/css/css_icons.asp">图标&lt;/a>的最简单方法是使用图标库。&lt;/p>
&lt;p>如果遇到一些结构和样式比较简单的小图标，就用字体图片。&lt;/p>
&lt;p>如果遇到一些结构和样式比较复杂的小图标，就用精灵图。&lt;/p>
&lt;h1 id="三角triangle">三角(Triangle)&lt;/h1>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/css-triangle/#html">CSS Triangle | CSS-Tricks&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">0&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">height&lt;/span>: &lt;span style="color:#b452cd">0&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">border&lt;/span>: &lt;span style="color:#b452cd">5&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">solid&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">transparent&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">border-left-color&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">pink&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="用户界面">用户界面&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://www.w3school.com.cn/cssref/pr_class_cursor.asp">cursor &lt;/a>&lt;/td>
&lt;td>更改用户的鼠标样式&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.w3school.com.cn/cssref/pr_outline.asp">outline&lt;/a>&lt;/td>
&lt;td>轮廓&lt;/td>
&lt;td>&lt;code>outline: none;&lt;/code>取消轮廓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.w3school.com.cn/cssref/pr_resize.asp">resize&lt;/a>&lt;/td>
&lt;td>规定可以由用户调整 div 元素的大小&lt;/td>
&lt;td>&lt;code>resize: none;&lt;/code>防止表单拖拽&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="垂直对齐">垂直对齐&lt;/h1>
&lt;p>&lt;a href="https://www.w3school.com.cn/cssref/pr_pos_vertical-align.asp">vertical-align&lt;/a> 属性设置元素的垂直对齐方式。&lt;/p>
&lt;p>只针对于行内元素或者行内块元素。&lt;/p>
&lt;p>使用场景：设置图片或者表单和文字垂直对齐。&lt;/p>
&lt;h1 id="文本溢出">文本溢出&lt;/h1>
&lt;p>&lt;a href="https://www.w3school.com.cn/css/css3_text_effects.asp">text-overflow&lt;/a> 属性规定应如何向用户呈现未显示的溢出内容。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>.&lt;span style="color:#008b45;font-weight:bold">test2&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">white-space&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">nowrap&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">200&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">border&lt;/span>: &lt;span style="color:#b452cd">1&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">solid&lt;/span> &lt;span style="color:#b452cd">#000000&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">overflow&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">hidden&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">text-overflow&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">ellipsis&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="css初始化">CSS初始化&lt;/h1>
&lt;p>&lt;a href="https://gitee.com/xiaoqiang001/html_css_material/blob/master/%E7%AC%AC%E4%B9%9D%E5%A4%A9/14-%E4%BA%AC%E4%B8%9Ccss%E5%88%9D%E5%A7%8B%E5%8C%96.css">css初始化&lt;/a>是指重设浏览器的样式。不同的浏览器默认的样式可能不尽相同，所以开发时的第一件事可能就是如何把它们统一。如果没对CSS初始化往往会出现浏览器之间的页面差异。&lt;/p>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E9%AB%98%E7%BA%A7/ - zzb2021.</description></item><item><title>CSS基础</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 26 Apr 2021 13:24:55 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E5%9F%BA%E7%A1%80/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E5%9F%BA%E7%A1%80/ -&lt;h1 id="字体属性">字体属性&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">属性&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_font_font.asp">font&lt;/a>&lt;/td>
&lt;td style="text-align:left">简写属性。在一条声明中设置所有字体属性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_font_font-family.asp">font-family&lt;/a>&lt;/td>
&lt;td style="text-align:left">规定文本的字体系列（字体族）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_font_font-size.asp">font-size&lt;/a>&lt;/td>
&lt;td style="text-align:left">规定文本的字体大小。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_font_font-style.asp">font-style&lt;/a>&lt;/td>
&lt;td style="text-align:left">规定文本的字体样式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_font_font-variant.asp">font-variant&lt;/a>&lt;/td>
&lt;td style="text-align:left">规定是否以小型大写字母的字体显示文本。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_font-weight.asp">font-weight&lt;/a>&lt;/td>
&lt;td style="text-align:left">规定字体的粗细。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="文本属性">文本属性&lt;/h1>
&lt;p>CSS使用某些文本格式属性来设置样式。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">属性&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;th>注意点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_text_color.asp">color&lt;/a>&lt;/td>
&lt;td style="text-align:left">文本颜色&lt;/td>
&lt;td>通常用16进制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_text_text-align.asp">text-align&lt;/a>&lt;/td>
&lt;td style="text-align:left">文本水平对齐方式&lt;/td>
&lt;td>可以左对齐或右对齐，或居中对齐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_text_text-indent.asp">text-indent&lt;/a>&lt;/td>
&lt;td style="text-align:left">文本缩进&lt;/td>
&lt;td>段落首行缩进两个字: &lt;code>text-indent=2em;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_text_text-decoration.asp">text-decoration&lt;/a>&lt;/td>
&lt;td style="text-align:left">文本装饰&lt;/td>
&lt;td>&lt;code>text-decoration: none;&lt;/code> 通常用于从链接上删除下划线&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_dim_line-height.asp">line-height&lt;/a>&lt;/td>
&lt;td style="text-align:left">行高&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="背景属性">背景属性&lt;/h1>
&lt;p>背景图片：实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片或者是精灵图，优点是便于控制位置。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">属性&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_background.asp">background&lt;/a>&lt;/td>
&lt;td style="text-align:left">在一条声明中设置所有背景属性的简写属性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_background-color.asp">background-color&lt;/a>&lt;/td>
&lt;td style="text-align:left">设置元素的背景色。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_background-image.asp">background-image&lt;/a>&lt;/td>
&lt;td style="text-align:left">设置元素的背景图像。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_background-repeat.asp">background-repeat&lt;/a>&lt;/td>
&lt;td style="text-align:left">设置背景图像是否及如何重复。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_background-position.asp">background-position&lt;/a>&lt;/td>
&lt;td style="text-align:left">设置背景图像的开始位置。&lt;strong>最重要的属性&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/cssref/pr_background-attachment.asp">background-attachment&lt;/a>&lt;/td>
&lt;td style="text-align:left">设置背景图像是固定的还是与页面的其余部分一起滚动。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">背景色半透明&lt;/td>
&lt;td style="text-align:left">&lt;code>background: rgba(0,0,0,0.3);&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="box-model">Box Model&lt;/h1>
&lt;p>CSS 盒模型实质上是一个包围每个 HTML 元素的盒子。它包括：外边距、边框、内边距以及实际的内容。&lt;/p>
&lt;p>&lt;img src="https://a390177226.github.io/images/html/boxModel.png" alt="Box Model">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Content&lt;/strong> - The content of the box, where text and images appear&lt;/li>
&lt;li>&lt;strong>Padding&lt;/strong> - Clears an area around the content. The padding is transparent&lt;/li>
&lt;li>&lt;strong>Border&lt;/strong> - A border that goes around the padding and content&lt;/li>
&lt;li>&lt;strong>Margin&lt;/strong> - Clears an area outside the border. The margin is transparent&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">#&lt;span style="color:#008b45;text-decoration:underline">box&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">70&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">margin&lt;/span>: &lt;span style="color:#b452cd">10&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">padding&lt;/span>: &lt;span style="color:#b452cd">5&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://a390177226.github.io/images/html/boxmodel_example.gif" alt="Box Model Example">&lt;/p>
&lt;p>元素总宽度 = 宽度 + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距&lt;/p>
&lt;p>元素总高度 = 高度 + 上内边距 + 下内边距 + 上边框 + 下边框 + 上外边距 + 下外边距&lt;/p>
&lt;p>&lt;code>70px(宽度)+10px(左+右内边距)+0px(左+右边框)+20px(左+右外边距)= 100px&lt;/code>&lt;/p>
&lt;h2 id="border">Border&lt;/h2>
&lt;p>CSS border 属性允许您指定元素边框的样式、宽度和颜色。为了缩减代码，也可以在一个属性中指定所有单独的边框属性。&lt;/p>
&lt;p>&lt;code>border: border-width border-style(必须) border-color;&lt;/code>&lt;/p>
&lt;p>还可以只为一个边指定所有单个边框(top, right, bottom, and left)属性：&lt;/p>
&lt;pre>&lt;code>p {
border-left: 6px solid red;
background-color: lightgrey;
}
&lt;/code>&lt;/pre>&lt;h2 id="padding">Padding&lt;/h2>
&lt;p>为 &lt;code>&amp;lt;div&amp;gt;&lt;/code> 元素的所有四个边设置不同的内边距：&lt;/p>
&lt;pre>&lt;code>div {
padding-top: 50px;
padding-right: 30px;
padding-bottom: 50px;
padding-left: 80px;
}
&lt;/code>&lt;/pre>&lt;p>或者简写为&lt;/p>
&lt;pre>&lt;code>div {
padding: 25px 50px 75px 100px;
}
&lt;/code>&lt;/pre>&lt;h2 id="margin">Margin&lt;/h2>
&lt;pre>&lt;code>p {
margin: 25px 50px 75px 100px;
}
&lt;/code>&lt;/pre>&lt;p>您可以将 margin 属性设置为 auto，以使元素在其容器中水平居中。&lt;/p>
&lt;h1 id="布局">布局&lt;/h1>
&lt;h2 id="display">Display&lt;/h2>
&lt;p>display 属性是用于控制布局的最重要的 CSS 属性。display 属性规定是否/如何显示元素。&lt;/p>
&lt;p>每个 HTML 元素都有一个默认的 display 值，具体取决于它的元素类型。大多数元素的默认 display 值为 block 或 inline。&lt;/p>
&lt;p>&lt;code>display：none；&lt;/code>隐藏对象，不占有原来的位置，用处更多。&lt;/p>
&lt;p>&lt;code>visibility：hidden；&lt;/code>隐藏对象，占有原来的位置。&lt;/p>
&lt;h2 id="浮动">浮动&lt;/h2>
&lt;p>float 属性用于定位和格式化内容，例如让图像向左浮动到容器中的文本那里。&lt;/p>
&lt;p>浮动最典型的应用：可以让多个块级元素在一行内排列显示。&lt;/p>
&lt;p>clear 属性指定哪些元素可以浮动于被清除元素的旁边以及哪一侧，最常见用法是&lt;code>clear: both;&lt;/code>。&lt;/p>
&lt;p>清除浮动：&lt;/p>
&lt;ul>
&lt;li>额外标签法，或隔墙法&lt;/li>
&lt;li>父级元素添加overflow&lt;/li>
&lt;li>&lt;code>::after&lt;/code>伪元素法&lt;/li>
&lt;li>双伪元素&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-css3" data-lang="css3">.clearfix::after {
content: &amp;quot;&amp;quot;;
clear: both;
display: table;
}
&lt;/code>&lt;/pre>&lt;h2 id="定位">定位&lt;/h2>
&lt;p>让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。&lt;/p>
&lt;p>定位=定位模式+边偏移（top、bottom、left 和 right）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">定位模式&lt;/th>
&lt;th style="text-align:left">是否脱标&lt;/th>
&lt;th>移动位置&lt;/th>
&lt;th>是否常用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">static&lt;/td>
&lt;td style="text-align:left">否&lt;/td>
&lt;td>不能使用边偏移&lt;/td>
&lt;td>很少&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">relative&lt;/td>
&lt;td style="text-align:left">否（占有位置）&lt;/td>
&lt;td>相对于自身位置移动&lt;/td>
&lt;td>常用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">absolute&lt;/td>
&lt;td style="text-align:left">是（不占有位置）&lt;/td>
&lt;td>带有定位的父级&lt;/td>
&lt;td>常用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">fixed&lt;/td>
&lt;td style="text-align:left">是（不占有位置）&lt;/td>
&lt;td>浏览器可视区&lt;/td>
&lt;td>常用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">sticky&lt;/td>
&lt;td style="text-align:left">否（占有位置）&lt;/td>
&lt;td>浏览器可视区&lt;/td>
&lt;td>很少&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note：子绝父相比较常见；z-index 属性指定元素的叠放顺序。&lt;/p>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E5%9F%BA%E7%A1%80/ - zzb2021.</description></item><item><title>CSS简介</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E7%AE%80%E4%BB%8B/</link><pubDate>Fri, 23 Apr 2021 14:06:30 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E7%AE%80%E4%BB%8B/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E7%AE%80%E4%BB%8B/ -&lt;h1 id="什么是-css">什么是 CSS？&lt;/h1>
&lt;ul>
&lt;li>CSS 指的是层叠样式表(&lt;strong>C&lt;/strong>ascading &lt;strong>S&lt;/strong>tyle &lt;strong>S&lt;/strong>heets)&lt;/li>
&lt;li>CSS 描述了&lt;strong>如何在屏幕、纸张或其他媒体上显示 HTML 元素&lt;/strong>&lt;/li>
&lt;li>CSS 也是一种标记语言，用于定义网页的样式，包括针对不同设备和屏幕尺寸的设计和布局&lt;/li>
&lt;li>CSS &lt;strong>节省了大量工作&lt;/strong>。它可以同时控制多张网页的布局&lt;/li>
&lt;li>外部样式表存储在 &lt;strong>CSS 文件&lt;/strong>中，只需改一个文件即可更改整个网站的外观&lt;/li>
&lt;/ul>
&lt;h1 id="css语法">CSS语法&lt;/h1>
&lt;p>CSS 规则集（rule-set）由选择器和声明块组成：&lt;/p>
&lt;p>&lt;img src="https://a390177226.github.io/images/html/selector.gif" alt="rule-set">&lt;/p>
&lt;ul>
&lt;li>选择器指向您需要设置样式的 HTML 元素。&lt;/li>
&lt;li>声明块包含一条或多条用分号分隔的声明。&lt;/li>
&lt;li>每条声明都包含一个 CSS 属性名称和一个值，以冒号分隔。&lt;/li>
&lt;li>多条 CSS 声明用分号分隔，声明块用花括号括起来。&lt;/li>
&lt;/ul>
&lt;h1 id="css选择器">CSS选择器&lt;/h1>
&lt;p>CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。&lt;/p>
&lt;p>我们可以将 CSS 选择器分为五类：&lt;/p>
&lt;ul>
&lt;li>简单选择器（根据名称、id、类来选取元素）&lt;/li>
&lt;li>&lt;a href="https://www.w3school.com.cn/css/css_combinators.asp">组合器选择器&lt;/a>（根据它们之间的特定关系来选取元素）&lt;/li>
&lt;li>&lt;a href="https://www.w3school.com.cn/css/css_pseudo_classes.asp">伪类选择器&lt;/a>（根据特定状态选取元素）&lt;/li>
&lt;li>&lt;a href="https://www.w3school.com.cn/css/css_pseudo_elements.asp">伪元素选择器&lt;/a>（选取元素的一部分并设置其样式）&lt;/li>
&lt;li>&lt;a href="https://www.w3school.com.cn/css/css_attribute_selectors.asp">属性选择器&lt;/a>（根据属性或属性值来选取元素）&lt;/li>
&lt;/ul>
&lt;h2 id="简单选择器">简单选择器&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Selector&lt;/th>
&lt;th style="text-align:left">Example&lt;/th>
&lt;th style="text-align:left">Example description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3schools.com/cssref/sel_id.asp">#&lt;em>id&lt;/em>&lt;/a>&lt;/td>
&lt;td style="text-align:left">#firstname&lt;/td>
&lt;td style="text-align:left">Selects the element with id=&amp;ldquo;firstname&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3schools.com/cssref/sel_class.asp">.&lt;em>class&lt;/em>&lt;/a>&lt;/td>
&lt;td style="text-align:left">.intro&lt;/td>
&lt;td style="text-align:left">Selects all elements with class=&amp;ldquo;intro&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;em>&lt;a href="https://www.w3schools.com/cssref/sel_element_class.asp">element.class&lt;/a>&lt;/em>&lt;/td>
&lt;td style="text-align:left">p.intro&lt;/td>
&lt;td style="text-align:left">Selects only &lt;code>&amp;lt;p&amp;gt;&lt;/code> elements with class=&amp;ldquo;intro&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3schools.com/cssref/sel_all.asp">*&lt;/a>&lt;/td>
&lt;td style="text-align:left">*&lt;/td>
&lt;td style="text-align:left">Selects all elements&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;em>&lt;a href="https://www.w3schools.com/cssref/sel_element.asp">element&lt;/a>&lt;/em>&lt;/td>
&lt;td style="text-align:left">p&lt;/td>
&lt;td style="text-align:left">Selects all &lt;code>&amp;lt;p&amp;gt;&lt;/code> elements&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;em>&lt;a href="https://www.w3schools.com/cssref/sel_element_comma.asp">element,element,..&lt;/a>&lt;/em>&lt;/td>
&lt;td style="text-align:left">div, p&lt;/td>
&lt;td style="text-align:left">Selects all &lt;code>&amp;lt;div&amp;gt;&lt;/code> elements and all &lt;code>&amp;lt;p&amp;gt;&lt;/code> elements&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="如何添加-css">如何添加 CSS&lt;/h1>
&lt;p>有三种插入样式表的方法：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">优点&lt;/th>
&lt;th style="text-align:left">缺点&lt;/th>
&lt;th>使用情况&lt;/th>
&lt;th>控制范围&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Inline CSS&lt;/td>
&lt;td style="text-align:left">书写方便，权重高&lt;/td>
&lt;td style="text-align:left">结构和样式混写&lt;/td>
&lt;td>较少&lt;/td>
&lt;td>控制一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Internal CSS&lt;/td>
&lt;td style="text-align:left">部分结构和样式相分离&lt;/td>
&lt;td style="text-align:left">没有彻底分离&lt;/td>
&lt;td>较多&lt;/td>
&lt;td>控制一个页面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">External CSS&lt;/td>
&lt;td style="text-align:left">结构和样式完全相分离&lt;/td>
&lt;td style="text-align:left">需要外部插入&lt;/td>
&lt;td>最多&lt;/td>
&lt;td>控制多个页面&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="css-注释">CSS 注释&lt;/h1>
&lt;p>位于 &lt;code>&amp;lt;style&amp;gt;&lt;/code> 元素内的 CSS 注释，以 /* 开始，以 */ 结束：&lt;/p>
&lt;h1 id="emmet语法">Emmet语法&lt;/h1>
&lt;p>Emmet语法使用缩写，来提高html/css的编写速度，vscode内部已经集成了语法。&lt;/p>
&lt;h1 id="css三大特性">CSS三大特性&lt;/h1>
&lt;p>CSS的一些最基本的概念——层叠、优先级和继承——这些概念决定着如何将CSS应用到HTML中，以及如何解决冲突。&lt;/p>
&lt;p>&lt;a href="https://css-tricks.com/specifics-on-css-specificity/">Specifics on CSS Specificity | CSS-Tricks&lt;/a>&lt;/p>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/css%E7%AE%80%E4%BB%8B/ - zzb2021.</description></item><item><title>HTML标签</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E6%A0%87%E7%AD%BE/</link><pubDate>Wed, 21 Apr 2021 18:50:24 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E6%A0%87%E7%AD%BE/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E6%A0%87%E7%AD%BE/ -&lt;h1 id="参考手册">参考手册&lt;/h1>
&lt;p>&lt;a href="https://www.w3school.com.cn/tags/index.asp">HTML 标签参考手册 (w3school.com.cn)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://man.ilovefishc.com/html5/">鱼C-Web-HTML5-速查宝典 (ilovefishc.com)&lt;/a>&lt;/p>
&lt;h1 id="特殊字符">特殊字符&lt;/h1>
&lt;p>在 HTML 中，某些字符是预留的。不能使用包含这些字符的文本。&lt;/p>
&lt;p>在 HTML 中&lt;strong>不能&lt;/strong>使用小于号&lt;code>（&amp;lt;）&lt;/code>和大于号&lt;code>（&amp;gt;）&lt;/code>，这是因为浏览器会误认为它们是标签。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>显示结果&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>实体名称&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>空格符&lt;/td>
&lt;td>&lt;code>&amp;amp;nbsp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;&lt;/td>
&lt;td>less-than&lt;/td>
&lt;td>&lt;code>&amp;amp;lt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;&lt;/td>
&lt;td>greater-than&lt;/td>
&lt;td>&lt;code>&amp;amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&lt;/td>
&lt;td>ampersand&lt;/td>
&lt;td>&lt;code>&amp;amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>©&lt;/td>
&lt;td>版权（copyright）&lt;/td>
&lt;td>&lt;code>&amp;amp;copy;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>²&lt;/td>
&lt;td>superscript 2&lt;/td>
&lt;td>&lt;code>&amp;amp;sup2;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如需完整的实体符号参考，请访问我们的 &lt;a href="https://www.w3school.com.cn/tags/html_ref_entities.html">HTML 实体符号参考手册&lt;/a>。&lt;/p>
&lt;h1 id="骨架标签">骨架标签&lt;/h1>
&lt;p>每个网页都会有的基本的结构标签。&lt;/p>
&lt;p>&lt;img src="https://a390177226.github.io/images/html/%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE.png" alt="基本的结构标签">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标签名&lt;/th>
&lt;th>定义&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&lt;/code>&lt;/td>
&lt;td>HTML标签&lt;/td>
&lt;td>页面中最大的标签，我们称为&lt;strong>根标签&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code>&lt;/td>
&lt;td>文档的头部&lt;/td>
&lt;td>注意在head标签中我们必须要设置的标签是title&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/code>&lt;/td>
&lt;td>文档的标题&lt;/td>
&lt;td>网页的标题&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/code>&lt;/td>
&lt;td>文档的主体&lt;/td>
&lt;td>页面内容基本上是放在body里的&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>VSCode工具生成骨架标签代码&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#1e889b">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">html&lt;/span> &lt;span style="color:#658b00">lang&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">meta&lt;/span> &lt;span style="color:#658b00">charset&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">meta&lt;/span> &lt;span style="color:#658b00">http-equiv&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span style="color:#658b00">content&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;IE=edge&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">meta&lt;/span> &lt;span style="color:#658b00">name&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#658b00">content&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">title&lt;/span>&amp;gt;Document&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>相较之前，主要多了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>&amp;lt;!DOCTYPE html&amp;gt;&lt;/code>告诉浏览器文档是HTML5版本编写。&amp;lt;!DOCTYPE&amp;gt;`不是 HTML 标签, 只是文档类型声明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&lt;/code>用来定义当前文档的语言是英文，&amp;ldquo;zh-CN&amp;quot;是中文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/code>如果不写就会乱码，其中UTF-8被称为万国码，charset字符集是多个字符的集合，以便计算机能够识别和存储各种文字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第5、6行用于移动端的显示。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="标题">标题&lt;/h1>
&lt;p>标题（Heading）是通过 &lt;code>&amp;lt;h1&amp;gt; - &amp;lt;h6&amp;gt; &lt;/code>等标签进行定义的。&lt;/p>
&lt;p>&lt;code>&amp;lt;h1&amp;gt;&lt;/code> 定义最大的标题,&lt;code>&amp;lt;h6&amp;gt;&lt;/code> 定义最小的标题。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">h1&lt;/span>&amp;gt;This is a heading&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">h2&lt;/span>&amp;gt;This is a heading&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">h3&lt;/span>&amp;gt;This is a heading&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">h3&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="段落">段落&lt;/h1>
&lt;p>段落是通过&lt;code> &amp;lt;p&amp;gt;&lt;/code> 标签定义的。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;This is a paragraph&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;This is another paragraph&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>文本在一个段落中会根据浏览器窗口的大小自动换行。&lt;/li>
&lt;li>浏览器会自动地在段落的前后添加空行。&lt;/li>
&lt;/ul>
&lt;h1 id="换行">换行&lt;/h1>
&lt;p>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 &lt;code>&amp;lt;br /&amp;gt;&lt;/code>标签：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;This is&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> /&amp;gt;a para&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> /&amp;gt;graph with line breaks&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;br /&amp;gt;&lt;/code> 元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此它没有结束标签。&lt;/p>
&lt;p>即使 &lt;code>&amp;lt;br&amp;gt;&lt;/code> 在所有浏览器中的显示都没有问题，使用 &lt;code>&amp;lt;br /&amp;gt;&lt;/code> 是&lt;strong>更长远的保障&lt;/strong>。&lt;/p>
&lt;h1 id="文本格式化">文本格式化&lt;/h1>
&lt;p>HTML 可定义很多供格式化输出的元素，比如粗体和斜体字。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">标签&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&lt;/code>或&lt;code>&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">加粗&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/code>或&lt;code>&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">倾斜&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;del&amp;gt;&amp;lt;/del&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">删除线&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;ins&amp;gt;&amp;lt;/ins&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">下划线&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="容器标签">容器标签&lt;/h1>
&lt;p>&lt;code>&amp;lt;div&amp;gt;&lt;/code>和&lt;code>&amp;lt;span&amp;gt;&lt;/code>是没有语义的，它们就是一个盒子，用来装内容的。&lt;/p>
&lt;p>&lt;strong>注释：&lt;/strong>&lt;code>&amp;lt;div&amp;gt;&lt;/code> 元素常用作布局工具，因为能够轻松地通过 CSS 对其进行定位。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;这是头部&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">span&lt;/span>&amp;gt;今日价格&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">span&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>&amp;lt;div&amp;gt;&lt;/code>标签用来布局，但是现在一行只能放一个&lt;code>&amp;lt;div&amp;gt;&lt;/code>。大盒子&lt;/li>
&lt;li>&lt;code>&amp;lt;span&amp;gt;&lt;/code>标签用来布局，一行上可以多个&lt;code>&amp;lt;span&amp;gt;&lt;/code>。小盒子&lt;/li>
&lt;/ul>
&lt;h1 id="图像标签">图像标签&lt;/h1>
&lt;p>在 HTML 中，图像由 &lt;code>&amp;lt;img&amp;gt;&lt;/code> 标签定义，它并不会在网页中插入图像，而是从网页上链接图像。&lt;/p>
&lt;p>&lt;code>&amp;lt;img&amp;gt;&lt;/code>是空标签，只包含属性，并且没有闭合标签。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">img&lt;/span> &lt;span style="color:#658b00">src&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;/i/eg_tulip.jpg&amp;#34;&lt;/span> &lt;span style="color:#658b00">alt&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;上海鲜花港 - 郁金香&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">属性&lt;/th>
&lt;th style="text-align:left">值&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/tags/att_img_alt.asp">alt&lt;/a>&lt;/td>
&lt;td style="text-align:left">text&lt;/td>
&lt;td style="text-align:left">必需属性，规定图像的替代文本。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/tags/att_img_src.asp">src&lt;/a>&lt;/td>
&lt;td style="text-align:left">URL&lt;/td>
&lt;td style="text-align:left">必需属性，规定显示图像的 URL。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/tags/att_img_height-width.asp">height&lt;/a>&lt;/td>
&lt;td style="text-align:left">px(pixels)或%&lt;/td>
&lt;td style="text-align:left">定义图像的高度（像素或百分比）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://www.w3school.com.cn/tags/att_img_height-width.asp">width&lt;/a>&lt;/td>
&lt;td style="text-align:left">px(pixels)或%&lt;/td>
&lt;td style="text-align:left">设置图像的宽度（像素或百分比）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="超链接">超链接&lt;/h1>
&lt;p>&lt;code>&amp;lt;a&amp;gt;&lt;/code> 标签用于定义超链接，超链接可以让用户从一个网页跳转到另一个网页。&lt;/p>
&lt;p>&lt;code>&amp;lt;a&amp;gt;&lt;/code> 标签最重要的属性是 href 属性，它指定了链接目标的 URL。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">a&lt;/span> &lt;span style="color:#658b00">href&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;http://www.w3school.com.cn/&amp;#34;&lt;/span> &lt;span style="color:#658b00">target&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;_blank&amp;#34;&lt;/span>&amp;gt;Visit W3School!&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;如果把链接的 target 属性设置为 &amp;#34;_blank&amp;#34;，该链接会在新窗口中打开。&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>外部链接&lt;code>&amp;lt;a href=&amp;quot;https://www.w3school.com.cn/&amp;quot;&amp;gt;W3School&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>
&lt;li>内部链接&lt;code>&amp;lt;a href=&amp;quot;../index.html&amp;quot;&amp;gt;首页&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>
&lt;li>空链接&lt;code>&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;空链接&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>
&lt;li>下载链接&lt;code>&amp;lt;a href=&amp;quot;xxx.zip&amp;quot;&amp;gt;下载文件&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>
&lt;li>锚点链接：点击链接可以快速定位到页面的某个位置
&lt;ul>
&lt;li>在链接文本的href属性中，设置属性值为#名字的形式，如&lt;code>&amp;lt;a href=&amp;quot;#two&amp;quot;&amp;gt;第二集&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>
&lt;li>找到目标位置标签，添加一个id属性，如&lt;code>&amp;lt;h3 id=&amp;quot;two&amp;quot;&amp;gt;第二集介绍&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="表格标签">表格标签&lt;/h1>
&lt;p>表格由 &lt;code>&amp;lt;table&amp;gt;&lt;/code> 标签来定义，主要用于显示、展示数据。&lt;/p>
&lt;p>每个表格均有若干行（由 &lt;code>&amp;lt;tr&amp;gt;&lt;/code> 标签定义），每行被分割为若干单元格（由 &lt;code>&amp;lt;td&amp;gt;&lt;/code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、段落、表格等等。&lt;/p>
&lt;p>表格的表头使用 &lt;code>&amp;lt;th&amp;gt;&lt;/code>标签进行定义，大多数浏览器会把表头显示为粗体居中的文本。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">table&lt;/span> &lt;span style="color:#658b00">border&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;1&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">tr&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">th&lt;/span>&amp;gt;Heading&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">th&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">th&lt;/span>&amp;gt;Another Heading&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">th&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">tr&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">tr&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;row 1, cell 1&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;row 1, cell 2&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">tr&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">tr&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;row 2, cell 1&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;row 2, cell 2&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">td&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">tr&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">table&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于表格可能很长，为了更好的表示表格的语义，可以使用&lt;code>&amp;lt;thead&amp;gt;&lt;/code> 标签定义表格的表头内容，&lt;code>&amp;lt;tbody&amp;gt;&lt;/code> 标签定义表格的主体内容，&lt;code>&amp;lt;tfoot&amp;gt;&lt;/code> 标签定义表格的表注内容（脚注或表注）。&lt;/p>
&lt;h2 id="合并单元格">合并单元格&lt;/h2>
&lt;p>使用colspan和rowspan属性跨行或跨列&lt;/p>
&lt;pre>&lt;code>&amp;lt;table border=&amp;quot;1&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;249&amp;quot; cellspacing=&amp;quot;0&amp;quot;&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td rowspan=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code>&lt;/pre>&lt;h1 id="列表标签">列表标签&lt;/h1>
&lt;p>HTML 支持有序、无序和自定义列表，列表是用来布局的。&lt;/p>
&lt;p>&lt;strong>无序列表&lt;/strong>始于 &lt;code>&amp;lt;ul&amp;gt;&lt;/code> 标签。每个列表项始于 &lt;code>&amp;lt;li&amp;gt;&lt;/code>。使用较多。&lt;/p>
&lt;p>有序列表始于 &lt;code>&amp;lt;ol&amp;gt;&lt;/code> 标签。每个列表项始于 &lt;code>&amp;lt;li&amp;gt;&lt;/code> 。使用较少。&lt;/p>
&lt;p>自定义列表以 &lt;code>&amp;lt;dl&amp;gt;&lt;/code> 标签开始。每个自定义列表项以 &lt;code>&amp;lt;dt&amp;gt;&lt;/code> 开始。每个自定义列表项的定义以 &lt;code>&amp;lt;dd&amp;gt;&lt;/code> 开始。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">ul&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">li&lt;/span>&amp;gt;Coffee&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">li&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">li&lt;/span>&amp;gt;Milk&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="表单标签">表单标签&lt;/h1>
&lt;p>HTML 表单用于搜集不同类型的用户输入。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>构成&lt;/th>
&lt;th>标签&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>表单域&lt;/td>
&lt;td>&lt;code>&amp;lt;form&amp;gt;&lt;/code>&lt;/td>
&lt;td>把它范围内的表单元素信息提交给服务器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>表单元素&lt;/td>
&lt;td>&lt;code>&amp;lt;input&amp;gt;&lt;/code>&lt;/td>
&lt;td>输入，最重要的表单元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>&amp;lt;select&amp;gt;&lt;/code>&lt;/td>
&lt;td>下拉列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>&amp;lt;textarea&amp;gt;&lt;/code>&lt;/td>
&lt;td>文本域&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>提示信息&lt;/td>
&lt;td>&lt;/td>
&lt;td>给用户输入每一项的提示信息&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="其他">其他&lt;/h1>
&lt;h2 id="水平线">水平线&lt;/h2>
&lt;p>&lt;code>&amp;lt;hr /&amp;gt;&lt;/code> 标签在 HTML 页面中创建水平线。hr 元素可用于分隔内容。&lt;/p>
&lt;h2 id="引用">引用&lt;/h2>
&lt;p>HTML &lt;code>&amp;lt;q&amp;gt;&lt;/code> 元素定义&lt;strong>短的引用&lt;/strong>，&lt;code>&amp;lt;blockquote&amp;gt;&lt;/code>元素定义&lt;strong>被引用的节&lt;/strong>。&lt;/p>
&lt;h2 id="内联框架">内联框架&lt;/h2>
&lt;p>iframe 用于在网页内显示网页。&lt;/p>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E6%A0%87%E7%AD%BE/ - zzb2021.</description></item><item><title>Html简介</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E7%AE%80%E4%BB%8B/</link><pubDate>Wed, 21 Apr 2021 18:23:09 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E7%AE%80%E4%BB%8B/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E7%AE%80%E4%BB%8B/ -&lt;h1 id="what-is-html">What is HTML?&lt;/h1>
&lt;p>HTML 是用来描述网页的一种语言。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>HTML 指的是超文本标记语言 (&lt;strong>H&lt;/strong>yper &lt;strong>T&lt;/strong>ext &lt;strong>M&lt;/strong>arkup &lt;strong>L&lt;/strong>anguage)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HTML 不是一种编程语言，而是一种&lt;strong>标记语言&lt;/strong> (markup language)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标记语言是一套&lt;strong>标记标签&lt;/strong> (markup tag)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HTML 使用&lt;strong>标记标签&lt;/strong>来描述网页&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="html-标签">HTML 标签&lt;/h1>
&lt;p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。&lt;/p>
&lt;ul>
&lt;li>HTML 标签是由&lt;strong>尖括号&lt;/strong>包围的关键词，比如 &lt;code>&amp;lt;html&amp;gt;&lt;/code>&lt;/li>
&lt;li>HTML 标签通常是&lt;strong>成对出现&lt;/strong>的，我们称为&lt;strong>双标签&lt;/strong>，比如 &lt;code>&amp;lt;b&amp;gt;&lt;/code>和 &lt;code>&amp;lt;/b&amp;gt;&lt;/code>&lt;/li>
&lt;li>标签对中的第一个标签是&lt;strong>开始标签&lt;/strong>，第二个标签是&lt;strong>结束标签&lt;/strong>&lt;/li>
&lt;li>开始和结束标签也被称为&lt;strong>开放标签&lt;/strong>和&lt;strong>闭合标签&lt;/strong>&lt;/li>
&lt;li>有些特殊的标签必须是单个标签（极少情况），例如&lt;code>&amp;lt;br /&amp;gt;&lt;/code>，我们称为&lt;strong>单标签&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="html-文档--网页">HTML 文档 = 网页&lt;/h1>
&lt;ul>
&lt;li>HTML 文档&lt;strong>描述网页&lt;/strong>&lt;/li>
&lt;li>HTML 文档&lt;strong>包含 HTML 标签&lt;/strong>和纯文本&lt;/li>
&lt;li>HTML 文档也被称为&lt;strong>网页&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">h1&lt;/span>&amp;gt;我的第一个标题&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;我的第一个段落。&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="例子解释">例子解释&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>&amp;lt;html&amp;gt;&lt;/code> 与 &lt;code>&amp;lt;/html&amp;gt; &lt;/code>之间的文本描述网页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;body&amp;gt;&lt;/code> 与 &lt;code>&amp;lt;/body&amp;gt; &lt;/code>之间的文本是可见的页面内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;h1&amp;gt;&lt;/code> 与 &lt;code>&amp;lt;/h1&amp;gt; &lt;/code>之间的文本被显示为标题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;p&amp;gt; &lt;/code>与 &lt;code>&amp;lt;/p&amp;gt;&lt;/code> 之间的文本被显示为段落&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="html-元素">HTML 元素&lt;/h1>
&lt;p>HTML 文档是由 HTML 元素定义的。HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">开始标签&lt;/th>
&lt;th style="text-align:left">元素内容&lt;/th>
&lt;th style="text-align:left">结束标签&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;p&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">This is a paragraph&lt;/td>
&lt;td style="text-align:left">&lt;code>&amp;lt;/p&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;a href=&amp;quot;default.htm&amp;quot; &amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">This is a link&lt;/td>
&lt;td style="text-align:left">&lt;code>&amp;lt;/a&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>&amp;lt;br /&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="html-元素语法">HTML 元素语法&lt;/h2>
&lt;ul>
&lt;li>HTML 元素以开始标签起始,以结束标签终止,元素的内容是开始标签与结束标签之间的内容&lt;/li>
&lt;li>某些 HTML 元素具有&lt;strong>空内容（empty content）&lt;/strong>&lt;/li>
&lt;li>空元素在开始标签中进行关闭（以开始标签的结束而结束）&lt;/li>
&lt;li>大多数 HTML 元素可拥有&lt;strong>属性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h1 id="html-属性">HTML 属性&lt;/h1>
&lt;p>HTML 标签可以拥有&lt;strong>属性&lt;/strong>。属性提供了有关 HTML 元素的&lt;strong>更多的信息&lt;/strong>。&lt;/p>
&lt;p>属性总是以名称/值对的形式出现，比如：&lt;strong>name=&amp;ldquo;value&amp;rdquo;&lt;/strong>。&lt;/p>
&lt;p>属性总是在 HTML 元素的&lt;strong>开始标签&lt;/strong>中规定。&lt;/p>
&lt;h2 id="属性实例">属性实例&lt;/h2>
&lt;p>HTML 链接由 &lt;code>&amp;lt;a&amp;gt;&lt;/code>标签定义。链接的地址在 href 属性中指定：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">a&lt;/span> &lt;span style="color:#658b00">href&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;http://www.w3school.com.cn&amp;#34;&lt;/span>&amp;gt;This is a link&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="html-注释">HTML 注释&lt;/h1>
&lt;p>可以将注释插入 HTML 代码提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#228b22">&amp;lt;!-- This is a comment --&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="html-响应式-web-设计">HTML 响应式 Web 设计&lt;/h1>
&lt;h2 id="什么是响应式-web-设计">什么是响应式 Web 设计？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>RWD 指的是响应式 Web 设计（Responsive Web Design）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RWD 能够以可变尺寸传递网页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RWD 对于平板和移动设备是必需的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用-bootstrap">使用 Bootstrap&lt;/h2>
&lt;p>除了自己来创建响应式设计，使用现成的 CSS 框架。&lt;/p>
&lt;p>Bootstrap 是最流行的开发响应式 web 的 HTML, CSS, 和 JS 框架。&lt;/p>
&lt;p>Bootstrap 帮助您开发在任何尺寸都外观出众的站点：显示器、笔记本电脑、平板电脑或手机。&lt;/p>
&lt;h1 id="semantic-html">Semantic HTML&lt;/h1>
&lt;p>&lt;a href="https://uxdesign.cc/semantic-html-the-foundation-of-web-accessibility-e5bbecad7c17">Semantic HTML: the foundation of web accessibility&lt;/a>&lt;/p>
&lt;h1 id="html-notes">HTML Notes&lt;/h1>
&lt;ul>
&lt;li>使用小写标签，HTML 标签对大小写不敏感：&lt;code>&amp;lt;P&amp;gt;&lt;/code> 等同于 &lt;code>&amp;lt;p&amp;gt;&lt;/code>。&lt;strong>推荐&lt;/strong>使用小写，在未来版本中可能&lt;strong>强制&lt;/strong>使用小写。&lt;/li>
&lt;li>&lt;strong>推荐&lt;/strong>使用小写属性，尽管属性和属性值对大小写&lt;strong>不敏感&lt;/strong>。&lt;/li>
&lt;li>属性值应该始终被包括在引号内，双引号是最常用的。&lt;/li>
&lt;li>无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。浏览器会移除&lt;strong>源代码&lt;/strong>中多余的空格和空行，所有连续的空格或空行都会被算作一个空格。&lt;/li>
&lt;/ul>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/html%E7%AE%80%E4%BB%8B/ - zzb2021.</description></item><item><title>Web基础知识</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/web_basic/</link><pubDate>Wed, 21 Apr 2021 17:59:55 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/web_basic/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/web_basic/ -&lt;h1 id="web-标准">Web 标准&lt;/h1>
&lt;h2 id="构成">构成&lt;/h2>
&lt;p>主要包括&lt;strong>结构(Structure)&lt;/strong>、&lt;strong>表现(Presentation)&lt;/strong> 和 &lt;strong>行为(Behavior)&lt;/strong> 三个方面。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标准&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>结构&lt;/td>
&lt;td>结构用于对&lt;strong>网页元素&lt;/strong>进行整理和分类，现阶段主要学的是HTML&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>表现&lt;/td>
&lt;td>表现用于设置网页元素的版式、颜色、大小等&lt;strong>外观样式&lt;/strong>，主要指的是CSS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>行为&lt;/td>
&lt;td>行为是指网页模型的定义及&lt;strong>交互&lt;/strong>的编写，现阶段主要学的是JavaScript&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Web标准提出的最佳体验方案：结构、样式、行为相分离。&lt;/p>
&lt;p>简单理解：结构写到HTML文件中，表现写到CSS文件中，行为写到JavaScript文件中。&lt;/p>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/web_basic/ - zzb2021.</description></item><item><title>Overview of front-end web development</title><link>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/overview/</link><pubDate>Wed, 21 Apr 2021 14:55:34 +0800</pubDate><guid>https://a390177226.github.io/%E5%89%8D%E7%AB%AF/overview/</guid><description>ZZB's blog https://a390177226.github.io/%E5%89%8D%E7%AB%AF/overview/ -&lt;h1 id="links">Links&lt;/h1>
&lt;p>参考手册：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.w3school.com.cn/">w3school中文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.w3schools.com/">W3Schools英文&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs (mozilla.org)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>路线视频：&lt;a href="https://www.youtube.com/watch?v=i5zRYMc7PFw">Frontend Learning Path in 2021 - YouTube&lt;/a>&lt;/p>
&lt;h1 id="a">a&lt;/h1>
&lt;p>aaaa&lt;/p>
&lt;h1 id="前端学习路线图">前端学习路线图&lt;/h1>
&lt;p>&lt;img src="https://a390177226.github.io/images/html/front_end_route.png" alt="前端学习路线图">&lt;/p>
&lt;h2 id="从开始到找到工作的六个阶段">从开始到找到工作的六个阶段&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>阶段&lt;/th>
&lt;th>需要学的东西&lt;/th>
&lt;th>时间&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>HTML+CSS&lt;/td>
&lt;td>1-2周&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>JavaScript&lt;/td>
&lt;td>一个月左右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>ES6、ES7、ES8、ES9&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>移动端和多端布局&lt;/td>
&lt;td>在工作中不断精进&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>Node.js&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>Vue框架&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
- https://a390177226.github.io/%E5%89%8D%E7%AB%AF/overview/ - zzb2021.</description></item><item><title>Hugo+github pages创建个人博客</title><link>https://a390177226.github.io/post/hugo/</link><pubDate>Tue, 20 Apr 2021 18:53:42 +0800</pubDate><guid>https://a390177226.github.io/post/hugo/</guid><description>ZZB's blog https://a390177226.github.io/post/hugo/ -&lt;h1 id="hugo">hugo&lt;/h1>
&lt;p>官网：&lt;a href="https://gohugo.io/">The world’s fastest framework for building websites | Hugo (gohugo.io)&lt;/a>&lt;/p>
&lt;p>视频教程：&lt;a href="https://www.bilibili.com/video/BV1q4411i7gL">手把手教你从0开始搭建自己的个人博客 |hugo|bilibili&lt;/a>&lt;/p>
&lt;h2 id="基础命令">基础命令&lt;/h2>
&lt;h3 id="查看hugo版本">查看hugo版本&lt;/h3>
&lt;pre>&lt;code class="language-git" data-lang="git">hugo version
&lt;/code>&lt;/pre>&lt;h3 id="创建一个hugo项目">创建一个hugo项目&lt;/h3>
&lt;pre>&lt;code class="language-git" data-lang="git">hugo new site mysite
&lt;/code>&lt;/pre>&lt;h3 id="创建一个页面">创建一个页面&lt;/h3>
&lt;pre>&lt;code class="language-git" data-lang="git">hugo new post/first.md
&lt;/code>&lt;/pre>&lt;h3 id="本地调试在浏览器输入httplocalhost1313httplocalhost1313访问">本地调试，在浏览器输入&lt;a href="http://localhost:1313/">http://localhost:1313/&lt;/a>访问&lt;/h3>
&lt;pre>&lt;code class="language-git" data-lang="git">hugo server --buildDrafts
&lt;/code>&lt;/pre>&lt;h1 id="部署到github-pages">部署到github pages&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>在github上创建一个新的仓库（注：仓库名为username.github.io）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在blog根目录的git上输入&lt;code>huge&lt;/code>来生成public文件夹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进入public文件夹&lt;/p>
&lt;pre>&lt;code class="language-git" data-lang="git">cd public
git init
git add .
git commit -m &amp;quot;frist&amp;quot;
git remote add origin https://github.com/a390177226/a390177226.github.io.git
git push -u origin master
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>在浏览器输入&lt;a href="https://a390177226.github.io/">https://a390177226.github.io/&lt;/a>访问&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="自动部署脚本">自动部署脚本&lt;/h2>
&lt;p>&lt;a href="https://xbc.me/hugo-deploy/">Hugo部署方案 - 神秘极客 (xbc.me)&lt;/a>&lt;/p>
&lt;p>建立deploy.sh文件，输入&lt;code>sh deploy.sh&lt;/code>执行脚本&lt;/p>
&lt;pre>&lt;code class="language-git" data-lang="git">#!/bin/bash
# Program:
# 发布Hugo生成文件到GitHub Pages
# History:
# 2020.05.05 GeekWho First release.
# If a command fails then the deploy stops
set -e
printf &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m\n&amp;quot;
# Build the project.
Hugo --minify # if using a theme, replace with `Hugo -t &amp;lt;YOURTHEME&amp;gt;`
# Go To Public folder
cd public
# Add changes to git.
git add .
# Commit changes.
msg=&amp;quot;Published on $(date +'%Y-%m-%d %H:%M:%S')&amp;quot;
if [ -n &amp;quot;$*&amp;quot; ]; then
msg=&amp;quot;$*&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;
git pull --rebase origin master
# Push source and build repos.
git push -f origin master
&lt;/code>&lt;/pre>- https://a390177226.github.io/post/hugo/ - zzb2021.</description></item></channel></rss>